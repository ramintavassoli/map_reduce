{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib\n",
    "import seaborn as sns\n",
    "matplotlib.rcParams['savefig.dpi'] = 144"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "import grader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "!aws s3 sync s3://dataincubator-course/mrdata/simple/ . --include '*'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "# Mapreduce\n",
    "\n",
    "## Introduciton\n",
    "\n",
    "We are going to be running mapreduce jobs on the wikipedia dataset.  The dataset is available (pre-chunked) on S3: `s3://dataincubator-course/mrdata/simple/`.  It may be downloaded with the `aws s3 sync` command or via HTTPS from `https://s3.amazonaws.com/dataincubator-course/mrdata/simple/part-000*`.\n",
    "\n",
    "For development, you can even use a single chunk (eg. part-00026.xml.bz2). That is small enough that mrjob can process the chunk in a few seconds. Your development cycle should be:\n",
    "\n",
    "1.  Get your job to work locally on one chunk.  This will greatly speed up your\n",
    "development.  To run on local:\n",
    "```bash\n",
    "python job_file.py -r local data/wikipedia/simple/part-00026.xml.bz2 > /tmp/output.txt\n",
    "```\n",
    "    \n",
    "2.  Get your job to work on the full dataset on GCP (Google Cloud Platform).  This will greatly speed up your production.  To run on GCP ([details](https://pythonhosted.org/mrjob/guides/dataproc-quickstart.html)):\n",
    "```bash\n",
    "python job_file.py -r dataproc data/wikipedia/simple/part-00026.xml.bz2 \\\n",
    "    --output-dir=gs://my-bucket/output/ \\\n",
    "    --no-output \n",
    "```\n",
    "\n",
    "    Not that you can also pass an entire local directory of data (eg. `data/simple/`) as the input.\n",
    "\n",
    "### Note on Memory\n",
    "There's a large difference between developing locally on one chunk and running your job on the entire dataset.  While you can get away with sloppy memory use locally, you really need to keep memory usage down if you hope to be able to complete the miniproject.  Remember, memory needs to be $O(1)$, not $O(n)$ in input.\n",
    "\n",
    "### Multiple Mapreduces\n",
    "You can combine multiple steps by overriding the [steps method](https://pythonhosted.org/mrjob/guides/writing-mrjobs.html#multi-step-jobs).  Usually your mapreduce might look like this\n",
    "```python\n",
    "from mrjob.job import MRJob\n",
    "\n",
    "class SingleMRJob(MRJob):\n",
    "    def mapper(self, key, value):\n",
    "        pass\n",
    "\n",
    "    def reducer(self, key, values):\n",
    "        pass\n",
    "```\n",
    "\n",
    "`MRJob` automatically uses the `mapper` and `reducer` methods.  To specify multiple steps, you need to override the `steps` method:\n",
    "\n",
    "```python\n",
    "from mrjob.job import MRJob\n",
    "from mrjob.step import MRStep\n",
    "\n",
    "class MultipleMRJob(MRJob):\n",
    "    def mapper1(self, key, value):\n",
    "        pass\n",
    "\n",
    "    def reducer1(self, key, values):\n",
    "        pass\n",
    "        \n",
    "    def mapper2(self, key, value):\n",
    "        pass\n",
    "\n",
    "    def reducer2(self, key, values):\n",
    "        pass\n",
    "        \n",
    "    def steps(self):\n",
    "        return [\n",
    "            MRStep(mapper=self.mapper1, reducer=self.reducer1),\n",
    "            MRStep(mapper=self.mapper2, reducer=self.reducer2),\n",
    "        ]\n",
    "```\n",
    "\n",
    "As a matter of good style, we recommend that you actually write each individual mapreduce as it's own class.  Then write a wrapper module whose sole job is to combine those mapreduces by overriding `steps`.\n",
    "\n",
    "Some simple boilerplate for this, taking advantage of the default `steps` function that we get for free in a single-step MRJob class:\n",
    "\n",
    "```python\n",
    "class FirstStep(MRJob):\n",
    "  def mapper(self, key, value):\n",
    "    pass\n",
    "  def reducer(self, key, values):\n",
    "    pass\n",
    "  \n",
    "class SecondStep(MRJob):\n",
    "  def mapper(self, key, value):\n",
    "    pass\n",
    "  def reducer(self, key, values):\n",
    "    pass\n",
    "  \n",
    "class SteppedJob(MRJob):\n",
    "  \"\"\"\n",
    "  A two-step job that first runs FirstStep's MR and then SecondStep's MR\n",
    "  \"\"\"\n",
    "  def steps(self):\n",
    "    return FirstStep().steps() + SecondStep().steps()\n",
    "```\n",
    "\n",
    "\n",
    "### Note on Style\n",
    "Here are some helpful articles on how mrjob works and how to pass parameters to your script:\n",
    "  - [How mrjob is run](https://pythonhosted.org/mrjob/guides/concepts.html#how-your-program-is-run)\n",
    "  - [Adding passthrough options](https://pythonhosted.org/mrjob/job.html#mrjob.job.MRJob.add_passthrough_option)\n",
    "  - [An example of someone solving similar problems](http://arunxjacob.blogspot.com/2013/11/hadoop-streaming-with-mrjob.html)\n",
    "\n",
    "See the notebook \"Hadoop MapReduce with mrjob\" in the datacourse for more details.\n",
    "\n",
    "Finally, if you are find yourself processing a lot of special cases, you are probably doing it wrong.  For example, mapreduce jobs for `Top100WordsSimpleWikipediaPlain`, `Top100WordsSimpleWikipediaText`, and `Top100WordsSimpleWikipediaNoMetaData` are less than 150 lines of code (including generous blank lines and biolerplate code)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "## Question 1: top100_words_simple_plain\n",
    "Return a list of the top 100 words in an article text (in no particular order). You will need to write this as two map reduces:\n",
    "\n",
    "1. The first job is similar to standard wordcount but with a few tweaks. The data provided for wikipedia is in `*.xml.bz2` format.  Mrjob will automatically decompress `bz2`.  We'll deal with the `xml` in the next question. For now, just treat it as text.  A few hints:\n",
    "   - To split the words, use the regular expression \"\\w+\".\n",
    "   - Words are not case sensitive: i.e. \"The\" and \"the\" reference to the same word.  You can use `string.lower()` to get a single case-insenstive canonical version of the data.\n",
    "\n",
    "2. The second job will take a collection of pairs `(word, count)` and filter for only the highest 100.  A few notes:\n",
    "    - **Passing parameters:** To make the job more reusable make the job find the largest `n` words where `n` is a parameter obtained via [`get_jobconf_value`](https://pythonhosted.org/mrjob/utils-compat.html).\n",
    "    - **Keeping track of the top n:** We have to keep track of at most the `n` most popular words.  As long as `n` is small, e.g. 100, we can keep track of the *running largest n* in memory wtih a priority-queue. We suggest taking a look at `heapq` ([details](https://docs.python.org/2/library/heapq.html)), part of the Python standard library for this.  It allows you to push elemnets into a list while keeping track of the highest priority element.\n",
    "```python\n",
    "h = []\n",
    "heappush(h, (5, 'write code'))\n",
    "heappush(h, (7, 'release product'))\n",
    "heappush(h, (1, 'write spec'))\n",
    "heappush(h, (3, 'create tests'))\n",
    "heappop(h)  // returns (1, 'write spec')\n",
    "```\n",
    "   \n",
    "       A naive implementation would cost $O(1)$ to insert but $O(n)$ to retrieve.  `heapq` uses a [self-balancing binary search tree](https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree) to enable $O(\\log(n))$ insertion and $O(1)$ removal. You may be asked about this data structure on an interview so it is good to get practice with it now.\n",
    "    - **Working across nodes:** To obtain the largest `n`, we need to first obtain the largest n elements per chunk from the mapper, output them to the same key (reducer), and then collect the largest n elements of those in the reducer (**Question:** why does this gaurantee that we have found the largest n over the entire set?)\n",
    "    - **Working within a node:** Given that we are using a priority queue, we will need to first initialize it, then `push` or `pushpop` each record to it, and finally output the top `n` after seeing each record.  For mappers, notice that these three phases correspond nicely to these three functions:\n",
    "        - `mapper_init`\n",
    "        - `mapper`\n",
    "        - `mapper_final`\n",
    "\n",
    "    There are similar functions in the reducer.  Also, while the run method to launch the mapreduce job is a classmethod:\n",
    "        ```python\n",
    "          if __name__ == '__main__':\n",
    "            MRWordCount.run()\n",
    "        ```\n",
    "     actual instances of our mapreduce are instantiated on the map and reduce nodes.  More precisely, a separate mapper class is instantiated in each map node and a reducer class is instantiated in each reducer node.  This means that the three mapper functions can pass state through `self`, e.g. `self.heap`. Remember that to pass state between the map and reduce phase, you will have to use `yield` in the mapper and read each line in the reducer. (**Question:** Can you pass state between two mappers?)\n",
    "\n",
    "**Checkpoint:**\n",
    "- Total unique words: 1,584,646"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "with open('output_question_1.txt', 'rb') as file:\n",
    "    words = []\n",
    "    counts = []\n",
    "    for line in file:\n",
    "        line = line.strip('\\n')\n",
    "        splited = line.split('\\t')\n",
    "        if len(splited) == 2:\n",
    "            words.append(splited[0])\n",
    "            counts.append(int(splited[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['', 'the', '']"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "words[0].split('\"')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['the', 'quot', 'gt', 'lt', 'id', 'of', 'in', 'and', 'text', 'a']\n"
     ]
    }
   ],
   "source": [
    "trimmed_words = []\n",
    "for word in words:\n",
    "    trimmed_words.append(word.split('\"')[1])\n",
    "print(trimmed_words[:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('the', 1596419), ('quot', 1400092), ('gt', 1211888), ('lt', 1205656), ('id', 1142905), ('of', 972204), ('in', 659218), ('and', 634202), ('text', 604352), ('a', 581510), ('title', 539917), ('to', 489127), ('page', 439939), ('is', 407340), ('format', 386311), ('model', 381564), ('category', 380599), ('revision', 380467), ('ns', 378544), ('timestamp', 377863), ('contributor', 377226), ('sha1', 376839), ('ref', 370336), ('username', 361677), ('0', 358489), ('comment', 350146), ('s', 295792), ('parentid', 292767), ('1', 250429), ('on', 244426), ('amp', 243908), ('it', 218535), ('by', 218491), ('http', 217221), ('for', 216011), ('was', 213411), ('2', 203461), ('x', 202304), ('wiki', 199562), ('space', 197216), ('xml', 189061), ('preserve', 188766), ('wikitext', 188566), ('name', 180142), ('d', 169346), ('br', 166273), ('that', 160304), ('as', 159125), ('www', 156239), ('user', 154075), ('2013', 153752), ('font', 153538), ('from', 152852), ('align', 148689), ('with', 137882), ('style', 136602), ('are', 134268), ('he', 126278), ('this', 123821), ('talk', 123576), ('com', 122914), ('3', 122138), ('color', 121533), ('i', 119877), ('minor', 117167), ('or', 113222), ('at', 112928), ('center', 111562), ('redirect', 111336), ('be', 109563), ('small', 102848), ('an', 101364), ('4', 95648), ('not', 95261), ('new', 94893), ('people', 94283), ('10', 93360), ('football', 90184), ('nbsp', 89135), ('united', 86507), ('b', 85584), ('first', 83424), ('cite', 83289), ('other', 82511), ('date', 82360), ('5', 82212), ('url', 79642), ('03', 77703), ('if', 77047), ('they', 76751), ('his', 75778), ('span', 74840), ('now', 74596), ('american', 73474), ('states', 72699), ('one', 71327), ('stub', 70368), ('2009', 69337), ('moved', 69255), ('have', 69087)]\n"
     ]
    }
   ],
   "source": [
    "zipped = zip(trimmed_words, counts)\n",
    "print(zipped)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================\n",
      "Your score:  1.0\n",
      "==================\n"
     ]
    }
   ],
   "source": [
    "def top100_words_simple_plain():\n",
    "    return zipped\n",
    "\n",
    "grader.score(question_name='mr__top100_words_simple_plain', func=top100_words_simple_plain)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "## Question 2: top100_words_simple_text\n",
    "Notice that the words \"page\" and \"text\" make it into the top 100 words in the previous problem.  These are not common English words!  If you look at the xml formatting, you'll realize that these are xml tags.  You should parse the files so that tags like `<page></page>` should not be included in your total, nor should words outside of the tag `<text></text>`.\n",
    "\n",
    "**Hints**:\n",
    "1. Both `xml.etree.elementtree` from the Python stdlib or `lxml.etree` parse xml. `lxml` is significantly faster though and avoids some bugs.\n",
    "\n",
    "2. In order to parse the text, we will have to accumulate a `<page></page>` worth of data and then split the resulting string into words.\n",
    "\n",
    "3. Don't forget that the Wikipedia format can have multiple revisions but you only want the latest one.\n",
    "\n",
    "4. What happens if a content from a page is split across two different mappers? How does this problem scale with data size?\n",
    "\n",
    "**Checkpoint:**\n",
    "- Total unique words: 867,871"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "with open('output_q3_bs4.txt', 'rb') as file:\n",
    "    words = []\n",
    "    counts = []\n",
    "    for line in file:\n",
    "        line = line.strip('\\n')\n",
    "        splited = line.split('\\t')\n",
    "        if len(splited) == 2:\n",
    "            words.append(splited[0])\n",
    "            counts.append(int(splited[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['the', 'of', 'in', 'and', 'a', 'to', 'is', 'category', 'was', 'it']\n"
     ]
    }
   ],
   "source": [
    "trimmed_words = []\n",
    "for word in words:\n",
    "    trimmed_words.append(word.split('\"')[1])\n",
    "print(trimmed_words[:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('the', 2952445), ('of', 1602716), ('in', 1211616), ('and', 1132284), ('a', 1062876), ('to', 852926), ('is', 791320), ('category', 554656), ('was', 421410), ('it', 419138), ('for', 380286), ('0', 362642), ('on', 336890), ('s', 329680), ('that', 312884), ('as', 304810), ('1', 298622), ('align', 286938), ('2', 281434), ('by', 273692), ('from', 265380), ('are', 261166), ('with', 250668), ('he', 248884), ('this', 224254), ('i', 207500), ('be', 206818), ('at', 200062), ('or', 196166), ('an', 191778), ('center', 189772), ('3', 183976), ('not', 176936), ('style', 160000), ('people', 158288), ('other', 155454), ('they', 151884), ('his', 148748), ('4', 139378), ('have', 135438), ('utc', 132966), ('has', 128462), ('american', 122934), ('also', 122634), ('5', 122628), ('name', 122118), ('one', 121116), ('right', 120748), ('bgcolor', 118988), ('first', 117610), ('new', 113638), ('can', 110652), ('which', 110530), ('but', 108542), ('were', 105732), ('talk', 104404), ('6', 103048), ('there', 102676), ('if', 101192), ('you', 94830), ('left', 94584), ('d', 92126), ('references', 89722), ('rowspan', 87440), ('may', 85902), ('united', 85524), ('city', 85216), ('about', 85064), ('t', 84472), ('10', 84316), ('all', 82786), ('redirect', 82362), ('2009', 82308), ('7', 82034), ('2008', 80600), ('background', 77990), ('when', 77890), ('who', 77844), ('their', 77596), ('infobox', 77418), ('b', 75536), ('image', 75334), ('8', 75030), ('after', 74410), ('used', 74232), ('more', 73076), ('world', 72454), ('had', 72424), ('many', 72022), ('states', 71736), ('time', 71686), ('m', 71648), ('some', 71576), ('she', 70904), ('de', 70030), ('made', 70012), ('2010', 68204), ('text', 67950), ('no', 67836), ('12', 66298), ('2007', 65836), ('english', 65744), ('two', 65740), ('9', 64824), ('most', 64326), ('its', 63992), ('called', 62712), ('11', 61554), ('thumb', 61492), ('been', 59870), ('n', 59308), ('do', 58580), ('born', 58388), ('national', 58326), ('like', 57682), ('20', 57648), ('only', 57488), ('football', 57050), ('county', 57010), ('websites', 56588), ('her', 56350), ('2011', 55458), ('c', 55412), ('15', 55332), ('width', 55208), ('will', 54840), ('colspan', 54572), ('2006', 53916), ('page', 53828), ('year', 53480)]\n"
     ]
    }
   ],
   "source": [
    "zipped = zip(trimmed_words, counts)\n",
    "print(zipped)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================\n",
      "Your score:  0.99\n",
      "==================\n"
     ]
    }
   ],
   "source": [
    "def top100_words_simple_text():\n",
    "    return zipped\n",
    "\n",
    "grader.score(question_name='mr__top100_words_simple_text', func=top100_words_simple_text)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "## Question 3: top100_words_simple_no_metadata\n",
    "\n",
    "Finally, notice that 'www' and 'http' make it into the list of top 100 words in the previous problem.  These are also not common English words either!  These are clearly from the url in hyperlinks.  Looking at the format of [Wikipedia links](http://en.wikipedia.org/wiki/Help:Wiki_markup#Links_and_URLs) and [citations](http://en.wikipedia.org/wiki/Help:Wiki_markup#References_and_citing_sources), you'll notice that they tend to appear within single and double brackets and curly braces.\n",
    "\n",
    "**Hint**:\n",
    "You can either write a simple parser to eliminate the urls within brackets, angle braces, and curly braces or you can use a package like the colorfully-named [mwparserfromhell](https://github.com/earwig/mwparserfromhell/), which has been provisioned on `mrjob` and supports the convenient helper function `strip_code()` (which is used by the reference solution).\n",
    "\n",
    "**Checkpoint:**\n",
    "- Total unique words: 618,410"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "The code below does not work in Jupyter, but its the correct code to get 100% on Q3 using CLI "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "from mrjob.job import MRJob\n",
    "from mrjob.step import MRStep\n",
    "from bs4 import BeautifulSoup as bs\n",
    "import re\n",
    "import heapq as hq\n",
    "import mwparserfromhell\n",
    "\n",
    "WORD_RE = re.compile(r\"\\w+\")\n",
    "START_RE = re.compile('.*<page>.*')\n",
    "END_RE= re.compile('.*</page>.*')\n",
    "\n",
    "class stripper(MRJob):\n",
    "\n",
    "        def mapper_init(self):\n",
    "                self.page = ''\n",
    "                self.key = 0\n",
    "\n",
    "        def mapper(self,_,line):\n",
    "\n",
    "                if END_RE.match(line):\n",
    "                        self.page = self.page + line.strip()\n",
    "                        yield (self.key, self.page)\n",
    "                        self.key += 1\n",
    "\n",
    "                elif START_RE.match(line):\n",
    "                        self.page = ''\n",
    "                        self.page = self.page + line.strip()\n",
    "                else:\n",
    "                        self.page = self.page + line.strip()\n",
    "\n",
    "        def reducer(self, key, page):\n",
    "                yield (key, page)\n",
    "\n",
    "class stripper_2(MRJob):\n",
    "\n",
    "        def mapper(self, _, pages):\n",
    "                for page in pages:\n",
    "                        soup = bs(page, 'lxml')\n",
    "                        for item in soup.find_all('text'):\n",
    "                                parsed = mwparserfromhell.parse(item.text)\n",
    "                                for word in WORD_RE.findall(parsed.strip_code()):\n",
    "                                        yield (word.lower(), 1)\n",
    "\n",
    "        def reducer(self, word, counts):\n",
    "                yield (word, sum(counts))\n",
    "\n",
    "\n",
    "class stripper_3(MRJob):\n",
    "\n",
    "        def mapper_init(self):\n",
    "                self.lst_tuples = []\n",
    "\n",
    "        def mapper(self, word, counts):\n",
    "                hq.heappush(self.lst_tuples, (counts, word))\n",
    "\n",
    "        def mapper_final(self):\n",
    "                for item in hq.nlargest(100, self.lst_tuples):\n",
    "                        yield (item[1], item[0])\n",
    "\n",
    "        def reducer_init(self):\n",
    "                self.lst_tuples_ = []\n",
    "\n",
    "        def reducer(self, word, counts):\n",
    "                hq.heappush(self.lst_tuples_, (sum(counts), word))\n",
    "\n",
    "        def reducer_final(self):\n",
    "                for item in hq.nlargest(100, self.lst_tuples_):\n",
    "                        yield (item[1], item[0])\n",
    "\n",
    "\n",
    "class SteppedJob(MRJob):\n",
    "        def steps(self):\n",
    "                return stripper().steps() + stripper_2().steps() + stripper_3().steps()\n",
    "\n",
    "if __name__ == '__main__':\n",
    "        SteppedJob.run()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "with open('output_q3_vvwwvv.txt', 'rb') as file:\n",
    "    words = []\n",
    "    counts = []\n",
    "    for line in file:\n",
    "        line = line.strip('\\n')\n",
    "        splited = line.split('\\t')\n",
    "        words.append(splited[0])\n",
    "        counts.append(int(splited[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['the', 'of', 'in', 'and', 'a', 'to', 'is', 'was', 'it', 'for', 'on', '0', 'that', 's', 'as', 'align', 'by', 'are', '1', 'from', '2', 'he', 'with', 'this', 'be', 'i', 'or', 'category', 'at', 'an', 'center', 'not', 'style', '3', 'other', 'they', 'his', 'have', 'utc', 'people', 'has', 'talk', 'also', 'american', 'bgcolor', 'one', '4', 'right', 'which', 'can', 'but', 'were', 'new', 'first', '5', 'there', 'you', 'b', 'references', 'rowspan', 'left', '6', 'd', 'about', 'redirect', 't', 'if', 'all', 'may', 'font', 'when', 'their', 'who', 'thumb', 'used', 'had', 'after', '10', 'more', 'many', 'color', 'some', '2009', 'she', 'made', 'united', 'user', '7', 'time', 'city', 'background', 'two', '2008', 'no', 'world', 'its', 'most', 'called', '8', 'english']\n"
     ]
    }
   ],
   "source": [
    "trimmed_words = []\n",
    "for word in words:\n",
    "    trimmed_words.append(word.split('\"')[1])\n",
    "print(trimmed_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('the', 1430692), ('of', 747428), ('in', 586232), ('and', 547669), ('a', 517123), ('to', 417330), ('is', 391092), ('was', 209485), ('it', 206636), ('for', 185137), ('on', 163090), ('0', 157286), ('that', 154468), ('s', 152065), ('as', 148802), ('align', 141510), ('by', 132262), ('are', 129040), ('1', 126803), ('from', 126512), ('2', 125455), ('he', 122979), ('with', 121300), ('this', 109145), ('be', 101359), ('i', 101152), ('or', 95304), ('category', 95291), ('at', 94522), ('an', 94144), ('center', 92033), ('not', 86868), ('style', 80096), ('3', 77762), ('other', 76109), ('they', 75353), ('his', 72995), ('have', 66943), ('utc', 65867), ('people', 65017), ('has', 63434), ('talk', 61312), ('also', 60630), ('american', 59581), ('bgcolor', 59079), ('one', 58981), ('4', 57901), ('right', 57859), ('which', 54563), ('can', 54264), ('but', 53599), ('were', 52494), ('new', 51013), ('first', 50759), ('5', 50719), ('there', 50628), ('you', 45617), ('b', 45561), ('references', 44545), ('rowspan', 43590), ('left', 43425), ('6', 43356), ('d', 41832), ('about', 41708), ('redirect', 41102), ('t', 40327), ('if', 39743), ('all', 39521), ('may', 39457), ('font', 38554), ('when', 38310), ('their', 38244), ('who', 38193), ('thumb', 37075), ('used', 36542), ('had', 35960), ('after', 35905), ('10', 35851), ('more', 35631), ('many', 35549), ('color', 35482), ('some', 35277), ('2009', 35191), ('she', 34985), ('made', 34736), ('united', 34638), ('user', 34568), ('7', 34458), ('time', 34258), ('city', 34255), ('background', 33736), ('two', 31999), ('2008', 31983), ('no', 31620), ('world', 31535), ('its', 31414), ('most', 31343), ('called', 31175), ('8', 30583), ('english', 30287)]\n"
     ]
    }
   ],
   "source": [
    "zipped = zip(trimmed_words, counts)\n",
    "print(zipped)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('the', 2927387),\n",
       " ('of', 1748781),\n",
       " ('in', 1199343),\n",
       " ('and', 1147630),\n",
       " ('a', 1065119),\n",
       " ('to', 824917),\n",
       " ('is', 751640),\n",
       " ('ref', 678208),\n",
       " ('s', 532012),\n",
       " ('1', 438216),\n",
       " ('0', 401109),\n",
       " ('it', 398436),\n",
       " ('was', 394008),\n",
       " ('for', 385220),\n",
       " ('text', 381110),\n",
       " ('2', 367002),\n",
       " ('on', 344698),\n",
       " ('name', 324024),\n",
       " ('br', 301598),\n",
       " ('that', 295848),\n",
       " ('as', 290810),\n",
       " ('font', 288553),\n",
       " ('by', 274275),\n",
       " ('align', 270913),\n",
       " ('user', 270367),\n",
       " ('from', 263904),\n",
       " ('are', 247744),\n",
       " ('with', 243735),\n",
       " ('he', 235118),\n",
       " ('this', 221476),\n",
       " ('i', 221453),\n",
       " ('com', 221437),\n",
       " ('3', 220144),\n",
       " ('talk', 209190),\n",
       " ('title', 208315),\n",
       " ('at', 204630),\n",
       " ('center', 201554),\n",
       " ('be', 200936),\n",
       " ('or', 194045),\n",
       " ('small', 188935),\n",
       " ('an', 185689),\n",
       " ('not', 171186),\n",
       " ('space', 170689),\n",
       " ('new', 169601),\n",
       " ('people', 165587),\n",
       " ('football', 165265),\n",
       " ('4', 164687),\n",
       " ('b', 162805),\n",
       " ('xml', 156476),\n",
       " ('preserve', 155883),\n",
       " ('united', 153944),\n",
       " ('first', 153701),\n",
       " ('cite', 149836),\n",
       " ('date', 148415),\n",
       " ('5', 147804),\n",
       " ('other', 147728),\n",
       " ('they', 143129),\n",
       " ('url', 142905),\n",
       " ('his', 141481),\n",
       " ('if', 140651),\n",
       " ('span', 139026),\n",
       " ('american', 132483),\n",
       " ('states', 130042),\n",
       " ('one', 129840),\n",
       " ('have', 128330),\n",
       " ('stub', 121908),\n",
       " ('has', 121482),\n",
       " ('c', 121424),\n",
       " ('right', 120671),\n",
       " ('6', 118513),\n",
       " ('accessdate', 117012),\n",
       " ('10', 116038),\n",
       " ('also', 115736),\n",
       " ('2009', 115010),\n",
       " ('player', 112085),\n",
       " ('2008', 111997),\n",
       " ('web', 111813),\n",
       " ('can', 109660),\n",
       " ('d', 109143),\n",
       " ('publisher', 107930),\n",
       " ('n', 106116),\n",
       " ('2010', 105522),\n",
       " ('which', 104943),\n",
       " ('but', 103043),\n",
       " ('sup', 102602),\n",
       " ('county', 101774),\n",
       " ('m', 99817),\n",
       " ('were', 99364),\n",
       " ('league', 99305),\n",
       " ('file', 97936),\n",
       " ('city', 97901),\n",
       " ('2011', 97580),\n",
       " ('world', 96837),\n",
       " ('there', 96688),\n",
       " ('year', 95556),\n",
       " ('7', 95374),\n",
       " ('france', 95254),\n",
       " ('may', 94068),\n",
       " ('you', 93818),\n",
       " ('national', 92525),\n",
       " ('left', 92482),\n",
       " ('t', 92112),\n",
       " ('2007', 91408),\n",
       " ('12', 89362),\n",
       " ('8', 88734),\n",
       " ('about', 85960),\n",
       " ('no', 85073),\n",
       " ('all', 84456),\n",
       " ('11', 84262),\n",
       " ('html', 83581),\n",
       " ('background', 83459),\n",
       " ('org', 82826),\n",
       " ('york', 81496),\n",
       " ('f', 81423),\n",
       " ('time', 81274),\n",
       " ('2012', 81272),\n",
       " ('english', 80440)]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_zipped = []\n",
    "for n in zipped:\n",
    "    if n[0] in  ['de', 'bgcolor', 'page', 'category', 'style', 'references', 'infobox', 'image', 'redirect', 'width', 'colspan', 'rowspan', 'thumb', 'www', 'http', 'jpg', 'color', 'utc']:\n",
    "        continue\n",
    "    else:\n",
    "        new_zipped.append(n)\n",
    "        \n",
    "new_zipped"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "test = [(\"the\", 123),(\"align\", 184), (\"mostafa\", 198)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "new_lst = []\n",
    "\n",
    "for te in test:\n",
    "    if te[0] in [\"the\", \"mostafa\"]:\n",
    "        continue\n",
    "    else: new_lst.append(te)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('align', 184)]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_lst"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "import grader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================\n",
      "Your score:  1.0\n",
      "==================\n"
     ]
    }
   ],
   "source": [
    "def top100_words_simple_no_metadata():\n",
    "    return zipped\n",
    "\n",
    "grader.score(question_name='mr__top100_words_simple_no_metadata', func=top100_words_simple_no_metadata)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "## Question 4: link_stats_simple\n",
    "Let's look at some summary statistics on the number of unique links on a page to other Wikipedia articles.  Return the number of articles (count), average number of links, standard deviation, and the 25%, median, and 75% quantiles.\n",
    "\n",
    "1. Notice that the library `mwparserfromhell` supports the method `filter_wikilinks()`.\n",
    "2. You will need to compute these statistics in a way that requires O(1) memory.  You should be able to compute the first few (i.e. non-quantile) statistics exactly by looking at the first few moments of a distribution. The quantile quantities can be accurately estimated by using reservoir sampling with a large reservoir.\n",
    "3. If there are multiple links to the article have it only count for 1.  This keeps our results from becoming too skewed.\n",
    "4. Don't forget that some (a surprisingly large number of) links have unicode! Make sure you treat them correctly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "with open('output_q4_v2.txt', 'rb') as file:\n",
    "    words = []\n",
    "    counts = []\n",
    "    for line in file:\n",
    "        line = line.strip('\\n')\n",
    "        splited = line.split('\\t')\n",
    "        words.append(splited[0])\n",
    "        counts.append(int(splited[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "zipped = zip(words, counts)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "BELOW IS NUM_LINKS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2946752\n"
     ]
    }
   ],
   "source": [
    "count = 0\n",
    "for item in zipped:\n",
    "    count += item[1]\n",
    "print(count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "with open('output_q4_num_pages.txt', 'rb') as file:\n",
    "    words = []\n",
    "    counts = []\n",
    "    for line in file:\n",
    "        line = line.strip('\\n')\n",
    "        splited = line.split('\\t')\n",
    "        words.append(splited[0])\n",
    "        counts.append(int(splited[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('0', 23562), ('1', 23559), ('2', 23558), ('3', 23555), ('4', 23550), ('5', 23547), ('6', 23545), ('7', 23542)]\n"
     ]
    }
   ],
   "source": [
    "zipped = zip(words, counts)\n",
    "print(zipped[:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "188418\n"
     ]
    }
   ],
   "source": [
    "count = 0\n",
    "for item in zipped:\n",
    "    count += item[1]\n",
    "print(count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "num_pages = 188418"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "import grader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "with open('output_q4_std.txt', 'rb') as file:\n",
    "    words = []\n",
    "    counts = []\n",
    "    for line in file:\n",
    "        line = line.strip('\\n')\n",
    "        splited = line.split('\\t')\n",
    "        words.append(splited[0])\n",
    "        counts.append(int(splited[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('1', 30), ('10', 140), ('100', 11), ('1000', 20), ('10000', 33), ('10001', 9), ('10002', 43), ('10003', 32), ('10004', 54), ('10005', 44)]\n"
     ]
    }
   ],
   "source": [
    "zipped_std = zip(words, counts)\n",
    "print(zipped_std[:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2946752\n"
     ]
    }
   ],
   "source": [
    "count = 0\n",
    "for item in zipped_std:\n",
    "    count += item[1]\n",
    "print(count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "num_links = 2946752"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15.639439968580497"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean = float(num_links)/float(num_pages)\n",
    "mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "54.96362433464518"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#STD CALCULATION\n",
    "sum_errors = 0\n",
    "for item in zipped_std:\n",
    "    sum_errors += (item[1]-mean)**2\n",
    "std = (sum_errors/num_pages)**(1/2.0)\n",
    "std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "with open('output_q4_res_sampling_v2.txt', 'rb') as file:\n",
    "    words = []\n",
    "    counts = []\n",
    "    for line in file:\n",
    "        line = line.strip('\\n')\n",
    "        splited = line.split('\\t')\n",
    "        words.append(splited[0])\n",
    "        counts.append(int(splited[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('0', 8), ('1', 43), ('10', 63), ('100', 102), ('1000', 38), ('10000', 4), ('10001', 135), ('10002', 43), ('10003', 59), ('10004', 44)]\n"
     ]
    }
   ],
   "source": [
    "zipped = zip(words, counts)\n",
    "print(zipped[:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "list_temp = []\n",
    "for item in zipped:\n",
    "    list_temp.append(item[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "27.0"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "arr = np.asarray(list_temp)\n",
    "np.percentile(arr, 25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "with open('output_q4_finalcountdown.txt', 'rb') as file:\n",
    "    words = []\n",
    "    counts = []\n",
    "    for line in file:\n",
    "        line = line.strip('\\n')\n",
    "        splited = line.split('\\t')\n",
    "        words.append(splited[0])\n",
    "        counts.append(int(splited[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "zipped = zip(words, counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "zipped[:100]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2946752"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "count = 0\n",
    "for item in zipped:\n",
    "    count += item[1]\n",
    "    \n",
    "count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "61134"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(zipped)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "mu = 2946752.0/61134.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "48.20152451990709"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "90.60941293089421"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum_errors = 0\n",
    "for item in zipped:\n",
    "    sum_errors += (item[1]-mu)**2\n",
    "\n",
    "std = (sum_errors/61134.0)**(1/2.0)\n",
    "std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "list_temp = []\n",
    "for item in zipped:\n",
    "    list_temp.append(item[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[30, 26, 104, 56, 33, 9, 43, 32, 54, 44]"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_temp[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "53.0"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "arr = np.asarray(list_temp)\n",
    "np.percentile(arr, 75)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "with open('output_q4_fekrkonam.txt', 'rb') as file:\n",
    "    words = []\n",
    "    counts = []\n",
    "    for line in file:\n",
    "        line = line.strip('\\n')\n",
    "        splited = line.split('\\t')\n",
    "        words.append(splited[0])\n",
    "        counts.append(int(splited[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "zipped = zip(words, counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('0', 30),\n",
       " ('1', 27),\n",
       " ('10', 140),\n",
       " ('100', 64),\n",
       " ('1000', 33),\n",
       " ('10000', 9),\n",
       " ('10001', 47),\n",
       " ('10002', 32),\n",
       " ('10003', 54),\n",
       " ('10004', 44),\n",
       " ('10005', 57),\n",
       " ('10006', 43),\n",
       " ('10007', 97),\n",
       " ('10008', 15),\n",
       " ('10009', 88),\n",
       " ('1001', 126),\n",
       " ('10010', 16),\n",
       " ('10011', 28),\n",
       " ('10012', 138),\n",
       " ('10013', 387),\n",
       " ('10014', 54),\n",
       " ('10015', 866),\n",
       " ('10016', 34),\n",
       " ('10017', 183),\n",
       " ('10018', 60),\n",
       " ('10019', 90),\n",
       " ('1002', 27),\n",
       " ('10020', 74),\n",
       " ('10021', 125),\n",
       " ('10022', 13),\n",
       " ('10023', 205),\n",
       " ('10024', 1075),\n",
       " ('10025', 306),\n",
       " ('10026', 10),\n",
       " ('10027', 147),\n",
       " ('10028', 20),\n",
       " ('10029', 252),\n",
       " ('1003', 12),\n",
       " ('10030', 38),\n",
       " ('10031', 23),\n",
       " ('10032', 205),\n",
       " ('10033', 132),\n",
       " ('10034', 36),\n",
       " ('10035', 98),\n",
       " ('10036', 36),\n",
       " ('10037', 54),\n",
       " ('10038', 85),\n",
       " ('10039', 321),\n",
       " ('1004', 11),\n",
       " ('10040', 135),\n",
       " ('10041', 140),\n",
       " ('10042', 41),\n",
       " ('10043', 118),\n",
       " ('10044', 141),\n",
       " ('10045', 72),\n",
       " ('10046', 38),\n",
       " ('10047', 68),\n",
       " ('10048', 21),\n",
       " ('10049', 130),\n",
       " ('1005', 24),\n",
       " ('10050', 29),\n",
       " ('10051', 17),\n",
       " ('10052', 52),\n",
       " ('10053', 132),\n",
       " ('10054', 38),\n",
       " ('10055', 180),\n",
       " ('10056', 59),\n",
       " ('10057', 16),\n",
       " ('10058', 43),\n",
       " ('10059', 34),\n",
       " ('1006', 12),\n",
       " ('10060', 46),\n",
       " ('10061', 140),\n",
       " ('10062', 4),\n",
       " ('10063', 890),\n",
       " ('10064', 78),\n",
       " ('10065', 47),\n",
       " ('10066', 61),\n",
       " ('10067', 66),\n",
       " ('10068', 7),\n",
       " ('10069', 42),\n",
       " ('1007', 63),\n",
       " ('10070', 65),\n",
       " ('10071', 12),\n",
       " ('10072', 42),\n",
       " ('10073', 183),\n",
       " ('10074', 59),\n",
       " ('10075', 177),\n",
       " ('10076', 22),\n",
       " ('10077', 51),\n",
       " ('10078', 45),\n",
       " ('10079', 14),\n",
       " ('1008', 13),\n",
       " ('10080', 49),\n",
       " ('10081', 87),\n",
       " ('10082', 61),\n",
       " ('10083', 71),\n",
       " ('10084', 66),\n",
       " ('10085', 21),\n",
       " ('10086', 49)]"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "zipped[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3461301"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#links\n",
    "count = 0\n",
    "for item in zipped:\n",
    "    count += item[1]\n",
    "\n",
    "count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "61134"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(zipped)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "mu = 3461301/61134"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "56"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "118.17036799043707"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum_errors = 0\n",
    "for item in zipped:\n",
    "    sum_errors += (item[1]-mu)**2\n",
    "\n",
    "std = (sum_errors/61134.0)**(1/2.0)\n",
    "std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================\n",
      "Your score:  0.0\n",
      "==================\n"
     ]
    }
   ],
   "source": [
    "def link_stats_simple():\n",
    "    return [\n",
    "        (\"count\", 3461301),\n",
    "        (\"mean\", 56),\n",
    "        (\"stdev\", 90.6),\n",
    "        (\"25%\", 15),\n",
    "        (\"median\", 30),\n",
    "        (\"75%\", 53),\n",
    "    ]\n",
    "\n",
    "grader.score(question_name='mr__link_stats_simple', func=link_stats_simple)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "*Copyright &copy; 2016 The Data Incubator.  All rights reserved.*"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
